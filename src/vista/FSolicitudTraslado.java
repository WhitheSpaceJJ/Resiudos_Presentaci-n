package vista;

import entidades.Productor;
import entidades.Productora;
import entidades.Quimico;
import entidades.Residuo;
import entidades.Residuo_Transporte;
import entidades.Solicitud_de_Traslado;
import entidades.Usuario;
import implementaciones.FabricaNegocios;
import implementaciones.INegocio;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import org.bson.types.ObjectId;

/**
 * Frame del registro de solicitud de traslado.
 *
 * @author Equipo 1 Jose,Abraham y Oroz
 */
public class FSolicitudTraslado extends javax.swing.JFrame {

    private static FSolicitudTraslado solicitudTraslado;
    private INegocio negocio;
    private Usuario usuario;
    private List<Residuo> residuosProductor;
    private List<Residuo> residuosSeleccionados;
    private List<String> especificaciones = new ArrayList<>();
    private List<Double> cantidades = new ArrayList<>();

    /**
     * Creates new form SolicitudTraslado
     */
    public FSolicitudTraslado() {
        initComponents();
        this.negocio = FabricaNegocios.crearFNegocio();
        this.jDateChooser1.getDateEditor().setEnabled(false);
    }

    /**
     * Patrón Singleton para que nomas exista una ventana de este tipo durante
     * todo el transcurso de la aplicación
     *
     * @return Instancia del frame del registro de solicitud de traslado.
     */
    public static FSolicitudTraslado getInstance() {
        if (FSolicitudTraslado.solicitudTraslado != null) {
            return FSolicitudTraslado.solicitudTraslado;
        } else {
            FSolicitudTraslado.solicitudTraslado = new FSolicitudTraslado();
            return FSolicitudTraslado.solicitudTraslado;
        }
    }

    /**
     * Asigna al usuario ingresado como parámetro
     *
     * @param usuario Usuario a establecer.
     */
    public void setUsuario(Usuario usuario) {
        this.usuario = usuario;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        jButtonAgregar = new javax.swing.JButton();
        jButtonCancelar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jButtonAgregarResiduo = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListResiduosProductor1 = new javax.swing.JList<>();
        jPanel4 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListResiduosSeleccionados = new javax.swing.JList<>();
        jButtonEliminar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Registro de Solicitud");
        setMinimumSize(new java.awt.Dimension(777, 450));
        setResizable(false);
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(204, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setFont(new java.awt.Font("Palatino Linotype", 1, 28)); // NOI18N
        jLabel1.setText("Solicitud de Traslado");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(227, 227, 227)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(239, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 770, 60);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Fecha");

        jDateChooser1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jDateChooser1.setMinSelectableDate(new java.util.Date(-62135740691000L));
        jDateChooser1.setOpaque(false);

        jLabel7.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        jLabel7.setText("Detalles Solicitud");

        jButtonAgregar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButtonAgregar.setText("Agregar ");
        jButtonAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAgregarActionPerformed(evt);
            }
        });

        jButtonCancelar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addContainerGap(66, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(25, 25, 25))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButtonAgregar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE))
                .addGap(94, 94, 94)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(129, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2);
        jPanel2.setBounds(0, 60, 240, 360);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel6.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        jLabel6.setText("Residuos ");

        jButtonAgregarResiduo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonAgregarResiduo.setText("Agregar");
        jButtonAgregarResiduo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAgregarResiduoActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(jListResiduosProductor1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                        .addComponent(jButtonAgregarResiduo)
                        .addGap(47, 47, 47))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(19, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonAgregarResiduo)
                        .addGap(65, 65, 65))))
        );

        getContentPane().add(jPanel3);
        jPanel3.setBounds(240, 60, 530, 180);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel8.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        jLabel8.setText("Residuos Seleccionados");

        jScrollPane2.setViewportView(jListResiduosSeleccionados);

        jButtonEliminar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonEliminar.setText("Eliminar");
        jButtonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                        .addComponent(jButtonEliminar)
                        .addGap(47, 47, 47))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(26, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonEliminar)
                        .addGap(70, 70, 70))))
        );

        getContentPane().add(jPanel4);
        jPanel4.setBounds(240, 240, 530, 180);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
/**
     * Al pulsar el botón cancelar se llama al método de limpiar
     *
     * @param evt Evento Action Perfomed del boton Cancelar
     */
    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        this.limpiar();
    }//GEN-LAST:event_jButtonCancelarActionPerformed

    /**
     * Método para validar los registros, verifica que no esten vacios y los
     * datos sean validos, despues comprueba con la fecha que se pueda
     * seleccionar una fecha menor a la de la solicitud y que no se pueda
     * seleccionar la misma fecha de la solicitud, en caso de que pase todos los
     * filtros devolverá falso
     *
     * @return true si se presenta alguna irregularidad, false en caso
     * contrario.
     */
    public boolean validarRegistro() {
        if (verificarDatosVacios()) {
            return true;
        }
        if (validarDatos()) {
            return true;
        }
        Date a = this.jDateChooser1.getDate();
        int dia = a.getDate();
        int mes = a.getMonth();
        int ano = a.getYear();
        Date fechaSolicitud = new GregorianCalendar(ano + 1900, mes, dia).getTime();
        Calendar calendar = Calendar.getInstance();
        int diaC = calendar.get(Calendar.DAY_OF_MONTH);
        int mesC = calendar.get(Calendar.MONTH);
        int anoC = calendar.get(Calendar.YEAR);
        Calendar diaActual = new GregorianCalendar(anoC, mesC, diaC);
        if (fechaSolicitud.before(diaActual.getTime())) {
            this.mostrarMensajeAdvertencia("No es posible seleccionar una fecha menor a la actual.");

            this.jDateChooser1.setDate(diaActual.getTime());
            return true;
        }
        if (fechaSolicitud.equals(diaActual.getTime())) {
            this.mostrarMensajeAdvertencia("No es posible seleccionar la fecha actual.");

            return true;
        }
        return false;
    }

    /**
     * Primero valida el registro, despues inicializa variables que son sacadas
     * de los residuos seleccionados para despues ir llenando una lista de
     * residuos a transportar, despues crea la solicitud de traslado nueva, la
     * valida, y si cumple con los requisitos informa al usuario que la
     * solicitud ha sido agregada, en caso contrario informará que no se pudo
     * agregar la solicitud, limpia todos los campos una vez termine la
     * operación
     *
     * @param evt Evento Action Perfomed del boton Agregar
     */
    private void jButtonAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAgregarActionPerformed
        if (validarRegistro()) {
            return;
        }

        Date a = this.jDateChooser1.getDate();
        int dia = a.getDate();
        int mes = a.getMonth();
        int ano = a.getYear();
        Date fechaSolicitud = new GregorianCalendar(ano + 1900, mes, dia).getTime();
        String estatus = "En Proceso";
        Productora empresaProductoraAuxiliar = ((Productor) this.usuario).getProductora();
        Productora empresaProductora = new Productora(empresaProductoraAuxiliar.getId(), empresaProductoraAuxiliar.getNombre());
        empresaProductora.setTamanho(empresaProductoraAuxiliar.getTamanho());
        empresaProductora.setTipoEmpresa(null);
        List<Residuo_Transporte> residuos = new ArrayList<>();
        for (int i = 0; i < residuosSeleccionados.size(); i++) {
            String especificacion = especificaciones.get(i);
            String estatusR = "En Proceso";
            double cantidad = cantidades.get(i);
            ObjectId idResiduo = residuosSeleccionados.get(i).getId();
            String nombre = residuosSeleccionados.get(i).getNombre();
            String descripcion = residuosSeleccionados.get(i).getDescripcion();
            String idResiduoD = residuosSeleccionados.get(i).getIdResiduo();
            Residuo residuo = new Residuo();
            residuo.setNombre(nombre);
            residuo.setId(idResiduo);
            residuo.setIdResiduo(idResiduoD);
            residuo.setDescripcion(descripcion);

            Residuo_Transporte residuoTransporte = new Residuo_Transporte(new ObjectId(), especificacion, estatusR, cantidad, residuo);
            residuos.add(residuoTransporte);
        }
        Solicitud_de_Traslado solicitudDeTraslado = new Solicitud_de_Traslado(fechaSolicitud, estatus, residuos, empresaProductora);

        String validarSolicitud = this.negocio.validarSolicitud(solicitudDeTraslado);

        if (validarSolicitud.length() != 0) {
            this.mostrarMensajeAdvertencia(validarSolicitud);
        } else {
            boolean seAgregoSolcitud = this.negocio.guardarSolicitud(solicitudDeTraslado);
            if (seAgregoSolcitud) {
                this.mostrarMensajeConfirmacion("Se agregó la solicitud de traslado.");
            } else {
                this.mostrarMensajeAdvertencia("No se pudo agregar la solicitud de traslado.");
            }
            this.limpiar();
        }

    }//GEN-LAST:event_jButtonAgregarActionPerformed
    /**
     * Método para mostrar un mensaje de confirmación
     *
     * @param mensaje Mensaje a mostrar
     */
    public void mostrarMensajeConfirmacion(String mensaje) {
        JOptionPane.showMessageDialog(this, mensaje, "Información", JOptionPane.INFORMATION_MESSAGE);

    }

    /**
     * Método que comprueba que se haya seleccionado algun residuo, si ha sido
     * seleccionado uno, lo agrega a la lista, la actualiza, habilita el botón
     * de quitar e inhabilita el de elegir, finalmente llena la tabla de
     * residuos seleccionados y la tabla de residuos productor
     *
     * @param evt Evento Action Perfomed del boton Agregar Residuo
     */
    private void jButtonAgregarResiduoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAgregarResiduoActionPerformed

        int indice = this.jListResiduosProductor1.getSelectedIndex();
        if (indice == -1) {
            JOptionPane.showMessageDialog(this, "No ha seleccionado algún residuo para agregar.",
                    "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            this.agregarResiduoLista(indice);
            this.actualizarLista(1, indice);
            this.habilitarBotonQuitar();
            this.inabilitarBotonElegir();
            this.llenarResiduosSeleccionados(residuosSeleccionados, especificaciones, cantidades);
            this.llenarListaResiduosProductor(residuosProductor);
        }
    }//GEN-LAST:event_jButtonAgregarResiduoActionPerformed

    /**
     * Agrega un residuo a la lista, primero le pide al usuario que seleccione
     * una unidad de medida ya sea kilos o litros, despues le pide ingresar la
     * cantidad para asi poder agregar las especificaciones, cantidades y el
     * residuo seleccionado
     *
     * @param indice Indice del residuo de la lista a agregar.
     */
    public void agregarResiduoLista(int indice) {

        String[] botones = {"Kilos", "Litros"};
        String respuesta = "";
        String cantidad = "";
        int variable = -1;
        do {
            variable = JOptionPane.showOptionDialog(null, " ¿Seleccione la unidad de medida?", "Especificación", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null/*icono*/, botones, botones[0]);
            if (variable == -1) {
                JOptionPane.showMessageDialog(this, "No ha seleccionado alguna unidad.",
                        "Error", JOptionPane.ERROR_MESSAGE);
            } else if (variable == 0 || variable == 1) {
                break;
            }
        } while (true);
        respuesta = botones[variable];

        do {
            cantidad = JOptionPane.showInputDialog("Ingrese la cantidad");
            if (cantidad == null) {
                JOptionPane.showMessageDialog(this, "Es necesario escribir la cantidad.",
                        "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                boolean salida = validarCantidad(cantidad);
                if (!salida) {
                    break;
                }
            }
        } while (true);
        especificaciones.add(respuesta);
        cantidades.add(Double.valueOf(cantidad));
        residuosSeleccionados.add(residuosProductor.get(indice));

    }

    /**
     * Método para actualizar la lista, se pide un entero que especifique el
     * tipo y el indice a eliminar, se borrara el elemento de que se encuentre
     * en el indice especificado de la lista especificada con el entero
     *
     * @param tipo Tipo de acutalizacion.
     * @param indice Indice del elemento a remover.
     */
    public void actualizarLista(int tipo, int indice) {
        if (tipo == 1) {
            residuosProductor.remove(indice);
        }
        if (tipo == 2) {
            residuosSeleccionados.remove(indice);
            especificaciones.remove(indice);
            cantidades.remove(indice);
        }
    }

    /**
     * Método para habilitar el botón de quitar
     */
    public void habilitarBotonQuitar() {
        this.jButtonEliminar.setEnabled(true);

    }

    /**
     * Método para inhabilitar el botón de elegir, solo en caso de que no hayan
     * residuos del productor
     */
    public void inabilitarBotonElegir() {
        if (residuosProductor.isEmpty()) {
            this.jButtonAgregarResiduo.setEnabled(false);
        }
    }

    /**
     * Primero comprueba que se haya seleccionado un residuo, despues lo elimina
     * de la lista, actualiza la lista, habilita el botón de elegir e inhabilita
     * el de quitar, despues llena los residuos seleccionados y la lista de
     * residuos de productor
     *
     * @param evt Evento Action Perfomed del boton Eliminar
     */
    private void jButtonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarActionPerformed
        int indice = this.jListResiduosSeleccionados.getSelectedIndex();
        if (indice == -1) {
            JOptionPane.showMessageDialog(this, "No ha seleccionado algún residuo.",
                    "Error", JOptionPane.ERROR_MESSAGE);

        } else {
            this.quitarResiduoLista(indice);
            this.actualizarLista(2, indice);
            this.habilitarBotonElegir();
            this.inabilitarBotonQuitar();
            this.llenarResiduosSeleccionados(residuosSeleccionados, especificaciones, cantidades);
            this.llenarListaResiduosProductor(residuosProductor);
        }
    }//GEN-LAST:event_jButtonEliminarActionPerformed

    /**
     * Método para quitar el residuo de la lista en base al índice especificado
     * como parámetro
     *
     * @param indice Indice del residuo a quitar.
     */
    public void quitarResiduoLista(int indice) {
        residuosProductor.add(residuosSeleccionados.get(indice));
    }

    /**
     * Método para habilitar el botón de elegir
     */
    public void habilitarBotonElegir() {
        this.jButtonAgregarResiduo.setEnabled(true);

    }

    /**
     * Botón para inhabilitar el botón de quitar
     */
    public void inabilitarBotonQuitar() {
        if (residuosSeleccionados.isEmpty()) {
            this.jButtonEliminar.setEnabled(false);
        }
    }

    /**
     * Metodo que valida el tamño de los campos de texto
     *
     * @return true si presentan alguna irregularidad, false en caso contrario.
     */
    private boolean validarCantidad(String cantidad) {

        Double b = new Double(1000000);
        double a = 0;
        try {
            a = new Double(cantidad);
        } catch (NumberFormatException e) {
            this.mostrarMensajeAdvertencia("El tamaño contiene caracteres inválidos.");
            return true;
        }
        if (a >= b) {
            this.mostrarMensajeAdvertencia("El tamaño es demasiado grande.");
            return true;
        }
        if (a <= 0) {
            this.mostrarMensajeAdvertencia("El tamaño no debe de ser menor a 0.");
            return true;
        }
        return false;
    }

    /**
     * Método que comprueba si la lista de residuos seleccionados se encuentra
     * vacia
     *
     * @return true si presentan alguna irregularidad, false en caso contrario.
     */
    private boolean validarDatos() {
        if (residuosSeleccionados.isEmpty()) {
            this.mostrarMensajeAdvertencia("La lista de residuos seleccionados se encuentra vacía.");
            return true;
        }
        return false;
    }

    /**
     * Método que comprueba si la fecha es nula
     *
     * @return true si presentan alguna irregularidad, false en caso contrario.
     */
    private boolean verificarDatosVacios() {
        if (this.jDateChooser1.getDate() == null) {
            this.mostrarMensajeAdvertencia("Es necesario seleccionar la fecha antes de guardar.");
            return true;
        }
        return false;
    }

    /**
     * Método que muestra un mensaje de advertencia
     *
     * @param mensaje Mensaje a mostar
     */
    public void mostrarMensajeAdvertencia(String mensaje) {
        JOptionPane.showMessageDialog(this, mensaje,
                "Error", JOptionPane.ERROR_MESSAGE);
    }

    /**
     * Método que llena la tabla de residuos productor con una lista de residuos
     * ingresada como parámetro
     *
     * @param lista Lista de residuos del productor a mostrar.
     */
    private void llenarListaResiduosProductor(List<Residuo> lista) {
        DefaultListModel d = new DefaultListModel();
        this.jListResiduosProductor1.setModel(d);
        DefaultListModel a = (DefaultListModel) this.jListResiduosProductor1.getModel();
        for (int i = 0; i < lista.size(); i++) {
            Residuo get = lista.get(i);
            a.addElement(String.valueOf(i + 1) + ". Código; " + get.getIdResiduo() + ", Nombre; " + get.getNombre() + ", Químicos; " + get.getQuimicos().toString());
        }
    }

    /**
     * Método que llena la lista de residuos seleccionados con los residuos,
     * especificaciones y cantidades especificadas en los parámetros
     *
     * @param lista Lista de residuos seleccionados.
     * @param especificaciones Especificaciones de los residuos seleecionados.
     * @param cantidades Cantidades de los residuos seleccionados.
     */
    private void llenarResiduosSeleccionados(List<Residuo> lista, List<String> especificaciones, List<Double> cantidades) {
        DefaultListModel d = new DefaultListModel();
        this.jListResiduosSeleccionados.setModel(d);
        DefaultListModel a = (DefaultListModel) this.jListResiduosSeleccionados.getModel();
        for (int i = 0; i < lista.size(); i++) {
            Residuo get = lista.get(i);
            a.addElement(String.valueOf(i + 1) + ". Código; " + get.getIdResiduo() + ", Nombre; " + get.getNombre() + ", Especificación; " + especificaciones.get(i) + ", Cantidad; " + cantidades.get(i));
        }
    }

    /**
     * Limpia campos de texto,
     */
    private void limpiar() {
        this.jDateChooser1.setDate(null);
        ObjectId idEmpresaProductora = ((Productor) this.usuario).getIdEmpresaProductora();
        this.residuosProductor = this.negocio.consultarResiduosProductor(idEmpresaProductora);
        this.residuosSeleccionados = new ArrayList<>();
        this.especificaciones = new ArrayList<>();
        this.cantidades = new ArrayList<>();
        this.botones();
        DefaultListModel d = new DefaultListModel();
        this.jListResiduosProductor1.setModel(d);
        DefaultListModel a = (DefaultListModel) this.jListResiduosProductor1.getModel();
        for (int i = 0; i < residuosProductor.size(); i++) {
            Residuo get = this.residuosProductor.get(i);
            a.addElement(String.valueOf(i + 1) + ". Codigo; " + get.getIdResiduo() + ", Nombre; " + get.getNombre() + ", Quimicos; " + get.getQuimicos().toString());
        }
        DefaultListModel dd = new DefaultListModel();
        this.jListResiduosSeleccionados.setModel(dd);
    }

    /**
     * Método para desactivar y activar los botones de agregar residuo y
     * eliminar
     */
    private void botones() {
        this.jButtonAgregarResiduo.setEnabled(false);
        this.jButtonEliminar.setEnabled(false);
        this.jButtonAgregarResiduo.setEnabled(true);
        this.jButtonEliminar.setEnabled(true);
    }

    /**
     * Método para llenar la lista de residuos en base a la lista especificada
     * como parámetro
     *
     * @param lista Lista de residuo.
     */
    public void llenarListaResiduos(List<Residuo> lista) {
        this.residuosProductor = lista;
        this.residuosSeleccionados = new ArrayList<>();
        this.botones();
        DefaultListModel d = new DefaultListModel();
        this.jListResiduosProductor1.setModel(d);
        DefaultListModel a = (DefaultListModel) this.jListResiduosProductor1.getModel();
        for (int i = 0; i < lista.size(); i++) {
            Residuo get = lista.get(i);
            a.addElement(String.valueOf(i + 1) + ". Codigo; " + get.getIdResiduo() + ", Nombre; " + get.getNombre() + ", Quimicos; " + get.getQuimicos().toString());
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAgregar;
    private javax.swing.JButton jButtonAgregarResiduo;
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonEliminar;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JList<String> jListResiduosProductor1;
    private javax.swing.JList<String> jListResiduosSeleccionados;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
