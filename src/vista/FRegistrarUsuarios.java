/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import entidades.Administrador;
import entidades.Productor;
import entidades.Productora;
import entidades.Transportador;
import entidades.Transporte;
import implementaciones.FNegocio;
import implementaciones.FabricaNegocios;
import interfaces.INegocio;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;

/**
 * Frame del registro de usuarios.
 * @author Equipo 1 Jose,Abraham y Oroz
 */
public class FRegistrarUsuarios extends javax.swing.JFrame {

    private static FRegistrarUsuarios registrarUsuarios;
    private List<Productora> listaProductoras;
    private List<Transporte> listaTransportes;
    private INegocio negocio =FabricaNegocios.crearFNegocio();

    /**
     * Creates new form RegistrarEmpresas
     */
    public FRegistrarUsuarios() {
        initComponents();
    }
/**
 * Patrón Singleton para que nomas exista un solo frame de Registrar Usuarios durante todo el transcurso de la aplicación
 * @return Instancia del frame de Registro de usuarios.
 */
    public static FRegistrarUsuarios getInstance() {
        if (FRegistrarUsuarios.registrarUsuarios != null) {
            return registrarUsuarios;
        } else {
            FRegistrarUsuarios.registrarUsuarios = new FRegistrarUsuarios();
            return registrarUsuarios;
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldCorreo = new javax.swing.JTextField();
        jTextFieldNombre2 = new javax.swing.JTextField();
        jComboBoxEmpresas = new javax.swing.JComboBox<>();
        jButtonGuardar = new javax.swing.JButton();
        jComboBoxUsuarios = new javax.swing.JComboBox<>();
        jPasswordFieldContraseña = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Registro Usuarios");
        setMinimumSize(new java.awt.Dimension(465, 385));
        setResizable(false);
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(153, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Registro de Usuario");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(161, 161, 161)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(147, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 500, 63);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Correo");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Contraseña");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Nombre");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Empresa");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Tipo Usuario");

        jTextFieldCorreo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jTextFieldNombre2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jComboBoxEmpresas.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jButtonGuardar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonGuardar.setText("Guardar");
        jButtonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGuardarActionPerformed(evt);
            }
        });

        jComboBoxUsuarios.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jComboBoxUsuarios.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Administrador", "Transportador", "Productor" }));
        jComboBoxUsuarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxUsuariosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextFieldCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(70, 70, 70))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(46, 46, 46)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldNombre2, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                            .addComponent(jPasswordFieldContraseña)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxEmpresas, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxUsuarios, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButtonGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)))
                .addContainerGap(147, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldNombre2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPasswordFieldContraseña, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxUsuarios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxEmpresas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButtonGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                .addGap(21, 21, 21))
        );

        getContentPane().add(jPanel2);
        jPanel2.setBounds(0, 60, 500, 300);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
/**
 * Compara el tipo de usuario que va a ser, si se trata de un administrador solo remueve todos los items del combo box de las empresas,
 * para poder hacer lo mismo con los otros 2 tipos de usuario, primero tiene que validar que existan transportes si se trata de un transportador , 
 * si se trata de un productor valida que existan las productoras, una vez validados agrega el nombre de las empresas productoras o de transporte según sea 
 * el caso del tipo de usuario.
 * @param evt Evento Action Perfomed del comboBoxUsuarios 
 */
    private void jComboBoxUsuariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxUsuariosActionPerformed
        this.listaProductoras = null;
        this.listaTransportes = null;
        this.listaProductoras = this.negocio.getEmpresasProductoras();
        this.listaTransportes = this.negocio.getEmpresasTransportes();
        String tipoUsuario = this.jComboBoxUsuarios.getSelectedItem().toString();
        if (tipoUsuario.equalsIgnoreCase("Administrador")) {
            this.jComboBoxEmpresas.removeAllItems();
        }
        if (tipoUsuario.equalsIgnoreCase("Transportador") && listaTransportes.isEmpty()) {
            this.jComboBoxUsuarios.setSelectedIndex(0);
            this.jComboBoxEmpresas.removeAllItems();
            JOptionPane.showMessageDialog(this, "No es posible registrar usuario transportador no existen empresas de transporte registradas.",
                    "Error", JOptionPane.ERROR_MESSAGE);
        } else if (tipoUsuario.equalsIgnoreCase("Transportador") && !listaTransportes.isEmpty()) {
            this.jComboBoxEmpresas.removeAllItems();
            for (int i = 0; i < listaTransportes.size(); i++) {
                Transporte get = listaTransportes.get(i);
                this.jComboBoxEmpresas.addItem("Nombre; "+get.getNombre()+", Direccion; "+get.getDireccion());
            }
        }
        if (tipoUsuario.equalsIgnoreCase("Productor") && listaProductoras.isEmpty()) {
            this.jComboBoxUsuarios.setSelectedIndex(0);
            this.jComboBoxEmpresas.removeAllItems();
            JOptionPane.showMessageDialog(this, "No es posible registrar usuario productor no existen empresas productoras registradas.",
                    "Error", JOptionPane.ERROR_MESSAGE);
        } else if (tipoUsuario.equalsIgnoreCase("Productor") && !listaProductoras.isEmpty()) {
            this.jComboBoxEmpresas.removeAllItems();
            for (int i = 0; i < listaProductoras.size(); i++) {
                Productora get = listaProductoras.get(i);
                this.jComboBoxEmpresas.addItem("Nombre; "+get.getNombre()+", Direccion; "+get.getDireccion());
            }
        }
    }//GEN-LAST:event_jComboBoxUsuariosActionPerformed
/**
 * Primero valida todos los datos ingresados, si los datos estan correos entonces registrara el usuario según el tipo de usuario que sea (administrador, transportador o productor)
 * Si la validación de guardar es correcta entonces informará que si se pudo guardar al usuario, si no, informará que no se pudo guardar al usuario
 * @param evt Evento Action Perfomed del boton guardar
 */
    private void jButtonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardarActionPerformed
        if (verificarDatosVacios()) {
            return;
        }
        if (verificarCantidadTamanho()) {
            return;
        }
        if (validaCorreo(this.jTextFieldCorreo.getText()) == false) {
            JOptionPane.showMessageDialog(this, "El correo es invalido.",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String nombreUsuario = this.jTextFieldNombre2.getText().trim();
        String contrasena = this.jPasswordFieldContraseña.getText();
        String correo = this.jTextFieldCorreo.getText();
        String tipoUsuario = this.jComboBoxUsuarios.getSelectedItem().toString();

        boolean validarUsuario = this.negocio.validarUsuario(nombreUsuario);
        if (validarUsuario) {
            JOptionPane.showMessageDialog(this, "Nombre de usuario no disponible.",
                    "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            boolean validarGuardar = false;
            if (tipoUsuario.equalsIgnoreCase("Administrador")) {
                Administrador administrador = new Administrador(nombreUsuario, contrasena, correo);
                validarGuardar = this.negocio.guardarUsuario(1, administrador);
            } else if (tipoUsuario.equalsIgnoreCase("Transportador")) {
                Transportador transportador = new Transportador(nombreUsuario, contrasena, correo);
                int indice = this.jComboBoxEmpresas.getSelectedIndex();
                transportador.setIdEmpresaTransporte(this.listaTransportes.get(indice).getId());
                validarGuardar = this.negocio.guardarUsuario(2, transportador);
            } else if (tipoUsuario.equalsIgnoreCase("Productor")) {
                Productor productor = new Productor(nombreUsuario, contrasena, correo);
                int indice = this.jComboBoxEmpresas.getSelectedIndex();
                productor.setIdEmpresaProductora(this.listaProductoras.get(indice).getId());
                validarGuardar = this.negocio.guardarUsuario(3, productor);
            }
            if (validarGuardar) {
                JOptionPane.showMessageDialog(this, "Se agregó el usuario.", "Información", JOptionPane.INFORMATION_MESSAGE);
                this.limpiarCaracteres();
            } else {
                JOptionPane.showMessageDialog(this, "No se pudo agregar al usuario.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }


    }//GEN-LAST:event_jButtonGuardarActionPerformed

    /**
     * Metodo que verifica si los campos de texto se encuentran vacios a
     * excepcion del celular.
     *
     * @return true si estan vacios, false en caso contrario.
     */
    private boolean verificarDatosVacios() {
        if (this.jTextFieldNombre2.getText().length() == 0) {
            JOptionPane.showMessageDialog(this, "Es necesario escribir el nombre de usuario antes de guardar.",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return true;
        }
        if (this.jPasswordFieldContraseña.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Es necesario escribir la contraseña antes de guardar.",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return true;
        }
        if (this.jTextFieldCorreo.getText().length() == 0) {
            JOptionPane.showMessageDialog(this, "Es necesario escribir el correo antes de guardar.",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return true;
        }

        return false;
    }

    /**
     * Limpia todos los campos del formulario
     */
    private void limpiarCaracteres() {
        this.jTextFieldNombre2.setText("");
        this.jTextFieldCorreo.setText("");
        this.jPasswordFieldContraseña.setText("");
        this.jComboBoxUsuarios.setSelectedIndex(0);
        this.jComboBoxEmpresas.removeAllItems();
    }

    /**
     * Metodo que valida si la cadena es un correo.
     *
     * @param s La cadena a evaluar
     * @return true si es entero, false en caso contrario
     */
    private boolean validaCorreo(String s) {
        Pattern pattern = Pattern
                .compile("^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@"
                        + "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$");
        Matcher mather = pattern.matcher(s);
        return mather.find();
    }

    /**
     * Metodo que valida el tamño de los campos de texto
     *
     * @return true si presentan alguna irregularidad, false en caso contrario.
     */
    private boolean verificarCantidadTamanho() {
        String nombre = this.jTextFieldNombre2.getText();
        String contrasena = this.jPasswordFieldContraseña.getText();
        String correo = this.jTextFieldCorreo.getText();
        if (nombre.length() > 30) {
            JOptionPane.showMessageDialog(this, "El nombre es demasiado largo, máximo 20 caracteres.", "Error", JOptionPane.ERROR_MESSAGE);
            return true;
        }
        if (contrasena.length() > 50) {
            JOptionPane.showMessageDialog(this, "La contraseña es demasiado larga, máximo 25 caracteres.", "Error", JOptionPane.ERROR_MESSAGE);
            return true;
        }
        if (correo.length() > 100) {
            JOptionPane.showMessageDialog(this, "El correo es demasiado largo, máximo 50 caracteres.", "Error", JOptionPane.ERROR_MESSAGE);
            return true;
        }
        return false;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButtonGuardar;
    private javax.swing.JComboBox<String> jComboBoxEmpresas;
    private javax.swing.JComboBox<String> jComboBoxUsuarios;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPasswordField jPasswordFieldContraseña;
    private javax.swing.JTextField jTextFieldCorreo;
    private javax.swing.JTextField jTextFieldNombre2;
    // End of variables declaration//GEN-END:variables
}
