/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import entidades.Asignacion_Traslado;
import entidades.Productora;
import entidades.Residuo;
import entidades.Residuo_Transporte;
import entidades.Solicitud_de_Traslado;
import entidades.Transporte;
import entidades.Usuario;
import implementaciones.FabricaNegocios;
import implementaciones.INegocio;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.bson.types.ObjectId;

/**
 * Frame de detalle asignacion.
 * @author Equipo 1 Jose,Abraham y Oroz
 */
public class FDetallesAsignacion extends javax.swing.JFrame {

    private static FDetallesAsignacion detalleAsignacion;
    private INegocio negocio;
    private Solicitud_de_Traslado solicitudDeTraslado;
    private List<Transporte> listaEmpresasT;

    /**
     * Inicializa la lista de empresas de trasnporte
     *
     * @param listaEmpresasT Lista de empreesas transportadoras a establecer.
     */
    public void setListaEmpresasT(List<Transporte> listaEmpresasT) {
        this.listaEmpresasT = listaEmpresasT;
    }

    /**
     * Es el patrón "singleton" para el frame de DetallesAsignacion, una
     * instancia única que restringe la creacion de este frame a uno solo
     *
     * @return Instancia del Frame de detalle asignacion.
     */
    public static FDetallesAsignacion getInstance() {
        if (FDetallesAsignacion.detalleAsignacion != null) {
            return FDetallesAsignacion.detalleAsignacion;
        } else {
            FDetallesAsignacion.detalleAsignacion = new FDetallesAsignacion();
            return FDetallesAsignacion.detalleAsignacion;
        }
    }

    /**
     * Inicializa la solicitud de traslado
     *
     * @param solicitudDeTraslado Solicitud de traslado.
     */
    public void setSolicitudDeTraslado(Solicitud_de_Traslado solicitudDeTraslado) {
        this.solicitudDeTraslado = solicitudDeTraslado;
    }

    /**
     * Creates new form DetallesSolicitudes
     */
    public FDetallesAsignacion() {
        initComponents();
        this.negocio = FabricaNegocios.crearFNegocio();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        panelTablaProductos3 = new javax.swing.JScrollPane();
        tablaResiduos1 = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        panelTablaProductos4 = new javax.swing.JScrollPane();
        tablaEmpresas = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jButtonAsignar = new javax.swing.JButton();
        jLabelFechaSolicitada = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabelProductor = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Detalles Asignación");
        setPreferredSize(new java.awt.Dimension(817, 591));
        setResizable(false);
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(204, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Detalles Asignación");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(275, 275, 275)
                .addComponent(jLabel1)
                .addContainerGap(357, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 810, 70);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tablaResiduos1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tablaResiduos1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nombre", "Descripción", "Unidad", "Cantidad"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaResiduos1.setToolTipText("Doble Click");
        tablaResiduos1.setCellSelectionEnabled(true);
        tablaResiduos1.getTableHeader().setReorderingAllowed(false);
        tablaResiduos1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaResiduos1MouseClicked(evt);
            }
        });
        panelTablaProductos3.setViewportView(tablaResiduos1);

        jLabel10.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        jLabel10.setText("Residuos Trasportar");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(panelTablaProductos3, javax.swing.GroupLayout.PREFERRED_SIZE, 487, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(panelTablaProductos3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(79, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2);
        jPanel2.setBounds(300, 70, 510, 250);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tablaEmpresas.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tablaEmpresas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Teléfono", "Dirección", "Tamaño", "Asignar"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaEmpresas.setCellSelectionEnabled(true);
        tablaEmpresas.getTableHeader().setReorderingAllowed(false);
        tablaEmpresas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaEmpresasMouseClicked(evt);
            }
        });
        panelTablaProductos4.setViewportView(tablaEmpresas);

        jLabel9.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        jLabel9.setText("Empresas  Transportadoras Disponibles");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(panelTablaProductos4, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(74, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(panelTablaProductos4, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(62, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel3);
        jPanel3.setBounds(300, 320, 510, 240);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jButtonAsignar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonAsignar.setText("Asignar");
        jButtonAsignar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAsignarActionPerformed(evt);
            }
        });

        jLabelFechaSolicitada.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelFechaSolicitada.setToolTipText("");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Fecha Solicitada");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel2.setText("Productor");

        jLabelProductor.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelProductor.setToolTipText("");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addComponent(jLabel2))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelProductor, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                            .addComponent(jLabelFechaSolicitada, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(jLabel3))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addComponent(jButtonAsignar)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jLabelProductor, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jLabelFechaSolicitada, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addComponent(jButtonAsignar)
                .addContainerGap(231, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel4);
        jPanel4.setBounds(0, 70, 300, 490);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void tablaResiduos1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaResiduos1MouseClicked

        if (evt.getClickCount() == 2) {
            this.llenarTablaEmpresasTransportadoras();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_tablaResiduos1MouseClicked

    private void tablaEmpresasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaEmpresasMouseClicked

    }//GEN-LAST:event_tablaEmpresasMouseClicked
    /**
     * Al pulsar el boton de asignar comprobara que se haya seleccionado algun
     * residuo y que se le de doble clic al residuo a transportar y que se haya
     * seleccionado una empresa de transporte, despues llenara una lista con los
     * elementos de la tabla de empresas, despues le asigna a una variable el
     * total de la carga de residuos, le asigna a otra variable la fecha de
     * solicitud de traslado, hace una lista nueva que contendra todas las
     * asignaciones de traslado encontradas, despues intentara guardar esa misma
     * lista y actualizar la solicitud, si el guardado es exitoso le informará
     * al usuario, si no lo es tambien informará al usuario de ello, al igual
     * que informará si no se pudo actualizar la solicitud
     *
     * @param evt
     */
    private void jButtonAsignarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAsignarActionPerformed

        int indiceResiduos = tablaResiduos1.getSelectedRow();
        if (indiceResiduos == -1) {
            JOptionPane.showMessageDialog(this, "No ha seleccionado algún residuo residuo.");
        } else {
            DefaultTableModel modeloTabla = (DefaultTableModel) this.tablaEmpresas.getModel();
            if (modeloTabla.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "Es necesario hacer doble click en el residuo a transportar.");
            } else {
                List<Transporte> listaEmpresasTAxuliar = new ArrayList<>();
                for (int i = 0; i < this.tablaEmpresas.getRowCount(); i++) {
                    if (this.tablaEmpresas.getValueAt(i, 4) != null && ((boolean) this.tablaEmpresas.getValueAt(i, 4)) == true) {
                        listaEmpresasTAxuliar.add(this.listaEmpresasT.get(i));
                    }
                }
                if (listaEmpresasTAxuliar.isEmpty()) {
                 JOptionPane.showMessageDialog(this, "Es necesario seleccionar alguna empresa de transporte, para "
                            + "proceder con la asignación de traslado.");
                } else {
                    //estatus,
                    int size = listaEmpresasTAxuliar.size();
                    double totaCarga = this.solicitudDeTraslado.getResiduos().get(indiceResiduos).getCantidad() / size;
                    String estatus = "En Proceso";
                    Date fechaSolicitud = this.solicitudDeTraslado.getFechaSolicitud();
                    List<Asignacion_Traslado> lista = new ArrayList<>();
                  Productora empresaProductora = this.solicitudDeTraslado.getEmpresaProductora();
                        Residuo residuo = this.solicitudDeTraslado.getResiduos().get(indiceResiduos).getResiduo();
                        String especificacion=this.solicitudDeTraslado.getResiduos().get(indiceResiduos).getEspecificacion();
                    for (int i = 0; i < listaEmpresasTAxuliar.size(); i++) {
                        ObjectId idEmpresaTransporte = listaEmpresasTAxuliar.get(i).getId();
                        Asignacion_Traslado asignacionTraslado = new Asignacion_Traslado(estatus, totaCarga, fechaSolicitud, idEmpresaTransporte, empresaProductora, residuo,especificacion);
                        lista.add(asignacionTraslado);
                    }
                    boolean validarGuardar = this.negocio.guardarAsignacionTraslado(lista);
                    if (validarGuardar) {
                        JOptionPane.showMessageDialog(this, "Se agregaron las asignaciones.", "Información", JOptionPane.INFORMATION_MESSAGE);
                        ObjectId idSolicitud = this.solicitudDeTraslado.getId();
                        Residuo_Transporte residuo_Transporte = this.solicitudDeTraslado.getResiduos().get(indiceResiduos);
                        boolean validarActualizacion = this.negocio.actualizarSolicitud(idSolicitud, residuo_Transporte);
                        if (!validarActualizacion) {
                            JOptionPane.showMessageDialog(this, "Error al actualizar solicitud.", "Información", JOptionPane.INFORMATION_MESSAGE);
                        }
                        this.actualizarTablaResiduos(indiceResiduos);
                    } else {
                        JOptionPane.showMessageDialog(this, "No se pudieron agregar las asignaciones.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        }


    }//GEN-LAST:event_jButtonAsignarActionPerformed
    /**
     * Método que desactiva el boton de asignar, elimina lo existente dentro de
     * los label y elimina todos los elementos dentro de las tablas de residuos
     * y empresas
     */
    private void salir() {
        this.jButtonAsignar.setEnabled(false);
        this.jLabelProductor.setText("");
        this.jLabelFechaSolicitada.setText("");
        DefaultTableModel modeloTabla = (DefaultTableModel) this.tablaResiduos1.getModel();
        modeloTabla.setRowCount(0);
        DefaultTableModel modeloTablaD = (DefaultTableModel) this.tablaEmpresas.getModel();
        modeloTablaD.setRowCount(0);
    }

    /**
     * Método que llama al método de botones, llena los campos de texto con los
     * valores de la empresa productora y la fecha de solicitud, hace una lista
     * con todos los residuos de la solicitud de traslado, borra los campos de
     * la tabla de residuos para despues llenarla con los datos de los residuos
     * que se encuentren con estatus de "en proceso", una vez mostrados en
     * pantalla los elimina dentro de la lista para ahorrar espacio
     */
    public void mostrarDatosSolicitud() {
        this.botones();
        this.jLabelProductor.setText(solicitudDeTraslado.getEmpresaProductora().getNombre());
        this.jLabelFechaSolicitada.setText(solicitudDeTraslado.getFechaSolicitud().toString());
        List<Residuo_Transporte> lista = this.solicitudDeTraslado.getResiduos();
        DefaultTableModel modeloTabla = (DefaultTableModel) this.tablaResiduos1.getModel();
        modeloTabla.setRowCount(0);
        List<Integer> listaAuxliar = new ArrayList<>();
        for (int i = 0; i < lista.size(); i++) {
            Object[] fila = new Object[5];
            Residuo_Transporte r = lista.get(i);
            if (r.getEstatus().equalsIgnoreCase("En Proceso")) {
                fila[0] = r.getResiduo().getIdResiduo();
                fila[1] = r.getResiduo().getNombre();
                fila[2] = r.getResiduo().getDescripcion();
                fila[3] = r.getEspecificacion();
                fila[4] = r.getCantidad();
                modeloTabla.addRow(fila);
            } else {
                listaAuxliar.add(i);
            }
        }
        for (int i = 0; i < listaAuxliar.size(); i++) {
            Residuo_Transporte residuo_Transporte = lista.get(listaAuxliar.get(i));
            lista.remove(residuo_Transporte);
        }
    }

    /**
     * Método para desactivar y activar el boton de asignar
     */
    private void botones() {
        this.jButtonAsignar.setEnabled(false);
        this.jButtonAsignar.setEnabled(true);
    }

    /**
     * Método para actualizar la tabla de residuos que recibe de parametro un
     * entero que representa la posicion, crea una lista con los residuos de la
     * solicitud y las elimina, una vez este vacia la lista obtiene el id de la
     * solicitud de traslado, comprobara si se puede finalizar la solicitud una
     * vez se intente actuazlizar la solicitud de traslado, en caso de que se
     * concluya manda un mensaje informando de ello, si no, manda un mensaje
     * advirtiendo de que hubo un error, si la lista no está vacia entonces
     * actualizará la tabla de residuos del frame y borrara los datos de la
     * tabla de empresas
     *
     * @param posicion Posiciondel residuo a eliminar.
     */
    private void actualizarTablaResiduos(int posicion) {
        List<Residuo_Transporte> lista = this.solicitudDeTraslado.getResiduos();
        Residuo_Transporte residuo_Transporte = lista.get(posicion);
        lista.remove(residuo_Transporte);
        if (lista.isEmpty()) {
            ObjectId _idSolicitudTraslado = this.solicitudDeTraslado.getId();
            boolean finalizarSolicitud = this.negocio.actualizarSolicitudTraslado(_idSolicitudTraslado);
            if (finalizarSolicitud) {
                JOptionPane.showMessageDialog(this, "Se ha concluido la solicitud.", "Información", JOptionPane.INFORMATION_MESSAGE);
                this.salir();
            } else {
                JOptionPane.showMessageDialog(this, "Error al actualizar solicitud.", "Información", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            DefaultTableModel modeloTabla = (DefaultTableModel) this.tablaResiduos1.getModel();
            modeloTabla.setRowCount(0);
            lista.forEach(residuos -> {
                Object[] fila = new Object[5];
                Residuo_Transporte r = residuos;
                if (r.getEstatus().equalsIgnoreCase("En Proceso")) {
                    fila[0] = r.getResiduo().getIdResiduo();
                    fila[1] = r.getResiduo().getNombre();
                    fila[2] = r.getResiduo().getDescripcion();
                    fila[3] = r.getEspecificacion();
                    fila[4] = r.getCantidad();
                    modeloTabla.addRow(fila);
                }
            });
            DefaultTableModel modeloTablaA = (DefaultTableModel) this.tablaEmpresas.getModel();
            modeloTablaA.setRowCount(0);
        }
    }

    /**
     * Este método llena la tabla de las empresas transportadoras, manda una
     * lista con todas las empresas de este tipo y muestra a cada una de ellas
     * dentro de la tabla de empresas
     */
    private void llenarTablaEmpresasTransportadoras() {
        List<Transporte> lista = this.listaEmpresasT;
        DefaultTableModel modeloTabla = (DefaultTableModel) this.tablaEmpresas.getModel();
        modeloTabla.setRowCount(0);
        lista.forEach(empresasT -> {
            Object[] fila = new Object[5];
            Transporte r = empresasT;
            fila[0] = r.getNombre();
            fila[1] = r.getTelefono();
            fila[2] = r.getDireccion();
            fila[3] = r.getTamanho();
            fila[4] = false;
            modeloTabla.addRow(fila);
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAsignar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelFechaSolicitada;
    private javax.swing.JLabel jLabelProductor;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane panelTablaProductos3;
    private javax.swing.JScrollPane panelTablaProductos4;
    private javax.swing.JTable tablaEmpresas;
    private javax.swing.JTable tablaResiduos1;
    // End of variables declaration//GEN-END:variables
}
